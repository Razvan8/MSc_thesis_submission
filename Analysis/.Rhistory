'X' = as.matrix(x.3w_new),
'y' = y.3w,
'beta' = beta.true
))
}
data<- create_data_fisher_test(l1=9,l2=9,l3=9)
data<- create_fisher_dataeset(l1=9,l2=9,l3=9)
data<- create_fisher_dataset(l1=9,l2=9,l3=9)
X<- data$X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
data<- create_fisher_dataset(l1=7,l2=3,l3=4)
X<- data$X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
data<- create_fisher_dataset(l1=17,l2=3,l3=4)
X<- data$X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
X
X<- data$X
X
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
data<- create_basic_dataset_bern_thesis()
X<- data$X
y<- data$y$obs
y<-array(y, dim=(c(length(y),1)) )
X
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
set.seed(1)
create_fisher_dataset <- function(l1,l2,l3) {
set.seed(1)
x.3w <- dummy.matrix(NF = 3, NL = c(l1+1, l2+1, l3+1))
print(colnames(x.3w))
col_mains <- colnames(x.3w)[c(1:(l1 + l2 + l3))]
#print(col_mains)
col_theta_good <- c()
for (i in c(1:l1)) {
for (j in c(1:l2)) {
# Create the string and append to the vector
col_theta_good <- c(col_theta_good, paste0("A.", i, ":B.", j))
}
for (k in c(1:l3))
{
col_theta_good <- c(col_theta_good, paste0("A.", i, ":C.", k))
}
}
for (j in c(1:l2))
{
for (k in c(1:l3))
{
col_theta_good <- c(col_theta_good, paste0("B.", j, ":C.", k))
}
}
col_psi_good<-c()
for (i in c(1:l1)) {
for (j in c(1:l2)) {
# Create the string and append to the vector
for (k in c(1:l3))
{col_psi_good <- c(col_psi_good, paste0("A.", i, ":B.", j, ":C.", k))
}}}
#print(col_theta_good)
col_all_good = c(col_mains, col_theta_good, col_psi_good)
print(col_all_good)
x.3w<-x.3w[,col_all_good]
print(x.3w)
#print(col_all_good)
# Hierarchical Coefficients (2way)
p.3w <- ncol(x.3w)
n.3w <- p.3w + 1
beta.min <- 2
beta.max <- 5
beta.true <- data.frame(rep(0, n.3w))
rownames(beta.true) <- c("interc", colnames(x.3w))
colnames(beta.true) <- c("coeffs")
set.seed(3)
beta.true$coeffs <- runif(n.3w, beta.min, beta.max) * sample(c(1, -1), size =  n.3w, replace = TRUE)
levs.true <-
c(
"A.1","A.2","A.3","A.4", "A.5", "A.10", "A.11", "A.12",
"B.1","B.2","B.3",
"C.1","C.2","C.3",
"A.1:B.1","A.1:B.2","A.1:B.3", "A.1:C.1", "A.1:C.2", "A.1:C.3",
"A.2:B.1","A.2:B.2", "A.2:C.1", "A.2:C.2", "A.2:C.3",
"A.10:B.1","A.10:B.2","A.10:B.3", "A.10:C.1", "A.10:C.2", "A.10:C.3",
"A.11:B.1","A.11:B.2","A.11:B.3", "A.11:C.1", "A.11:C.2", "A.11:C.3",
"B.1:C.1", "B.1:C.2",
"A.1:B.1:C.1",
"A.2:B.1:C.1",
"A.10:B.1:C.1",
"A.11:B.1:C.1"
)
beta.true$coeffs[which(!is.element(rownames(beta.true), levs.true))] <-0
beta.true$coeffs[2:(2+l1+l2+l3)]<-beta.true$coeffs[2:(2+l1+l2+l3)]+sign(beta.true$coeffs[2:(2+l1+l2+l3)])*3 #mains are from U[4,8]
beta.true$coeffs[1]<- -8
#beta.true_new <-
#beta.true[c("interc", col_all_good), , drop = FALSE]
#print("new beta true")
#print(beta.true_new)
#rownames(beta.true_new) <- c("interc", col_all_good)
#beta.true
#print(beta.true)
# Response vector (2way)
sigma.y <- 0.5
y.3w <- data.frame(row.names = rownames(x.3w))
set.seed(111)
print(mean(
beta.true$coeffs[1] + as.matrix(x.3w) %*% as.vector(beta.true$coeffs)[-1]
))
eta=beta.true$coeffs[1] + as.matrix(x.3w) %*% as.vector(beta.true$coeffs)[-1]
prob=exp(eta)/(exp(eta)+1)
y.3w$obs <- sample_contbern(p=prob)
y.3w$true <-kappa1(beta.true$coeffs[1] + as.matrix(x.3w) %*% as.vector(beta.true$coeffs)[-1]) #get bern
x.3w_new <- x.3w[, col_all_good , drop = FALSE]
if (all(rownames(beta.true)[-1] == colnames(x.3w_new)) == TRUE)
{
print("Data loaded properly")
}
print("SNR:")
print(var(as.vector(y.3w$true)) / (sigma.y ^ 2))
#print("newcolnames")
#print(colnames(x.3w_new))
return(list(
'X' = as.matrix(x.3w_new),
'y' = y.3w,
'beta' = beta.true
))
}
data<- create_fisher_dataset(l1=17,l2=3,l3=4)
X<- data$X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
X
data<- create_fisher_dataset(l1=9,l2=3,l3=4)
X<- data$X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
data<- create_fisher_dataset(l1=10,l2=3,l3=4)
X<- data$X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
data<- create_basic_dataset_bern_thesis()
vals<-eigen(t(X)%*%X)$values
X<- data$X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
data<- create_fisher_dataset(l1=10,l2=2,l3=2)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
set.seed(1)
create_fisher_dataset <- function(l1,l2,l3) {
set.seed(1)
x.3w <- dummy.matrix(NF = 3, NL = c(l1+1, l2+1, l3+1))
print(colnames(x.3w))
col_mains <- colnames(x.3w)[c(1:(l1 + l2 + l3))]
#print(col_mains)
col_theta_good <- c()
for (i in c(1:l1)) {
for (j in c(1:l2)) {
# Create the string and append to the vector
col_theta_good <- c(col_theta_good, paste0("A.", i, ":B.", j))
}
for (k in c(1:l3))
{
col_theta_good <- c(col_theta_good, paste0("A.", i, ":C.", k))
}
}
for (j in c(1:l2))
{
for (k in c(1:l3))
{
col_theta_good <- c(col_theta_good, paste0("B.", j, ":C.", k))
}
}
col_psi_good<-c()
for (i in c(1:l1)) {
for (j in c(1:l2)) {
# Create the string and append to the vector
for (k in c(1:l3))
{col_psi_good <- c(col_psi_good, paste0("A.", i, ":B.", j, ":C.", k))
}}}
#print(col_theta_good)
col_all_good = c(col_mains, col_theta_good, col_psi_good)
print(col_all_good)
x.3w<-x.3w[,col_all_good]
print(x.3w)
#print(col_all_good)
# Hierarchical Coefficients (2way)
p.3w <- ncol(x.3w)
n.3w <- p.3w + 1
beta.min <- 2
beta.max <- 5
beta.true <- data.frame(rep(0, n.3w))
rownames(beta.true) <- c("interc", colnames(x.3w))
colnames(beta.true) <- c("coeffs")
set.seed(3)
beta.true$coeffs <- runif(n.3w, beta.min, beta.max) * sample(c(1, -1), size =  n.3w, replace = TRUE)
levs.true <-
c(
"A.1","A.2","A.3","A.4", "A.5", "A.10", "A.11", "A.12",
"B.1","B.2","B.3",
"C.1","C.2","C.3",
"A.1:B.1","A.1:B.2","A.1:B.3", "A.1:C.1", "A.1:C.2", "A.1:C.3",
"A.2:B.1","A.2:B.2", "A.2:C.1", "A.2:C.2", "A.2:C.3",
"A.10:B.1","A.10:B.2","A.10:B.3", "A.10:C.1", "A.10:C.2", "A.10:C.3",
"A.11:B.1","A.11:B.2","A.11:B.3", "A.11:C.1", "A.11:C.2", "A.11:C.3",
"B.1:C.1", "B.1:C.2",
"A.1:B.1:C.1",
"A.2:B.1:C.1",
"A.10:B.1:C.1",
"A.11:B.1:C.1"
)
beta.true$coeffs[which(!is.element(rownames(beta.true), levs.true))] <-0
beta.true$coeffs[2:(2+l1+l2+l3)]<-beta.true$coeffs[2:(2+l1+l2+l3)]+sign(beta.true$coeffs[2:(2+l1+l2+l3)])*3 #mains are from U[4,8]
beta.true$coeffs[1]<- -8
#beta.true_new <-
#beta.true[c("interc", col_all_good), , drop = FALSE]
#print("new beta true")
#print(beta.true_new)
#rownames(beta.true_new) <- c("interc", col_all_good)
#beta.true
#print(beta.true)
# Response vector (2way)
sigma.y <- 0.5
y.3w <- data.frame(row.names = rownames(x.3w))
set.seed(111)
print(mean(
beta.true$coeffs[1] + as.matrix(x.3w) %*% as.vector(beta.true$coeffs)[-1]
))
eta=beta.true$coeffs[1] + as.matrix(x.3w) %*% as.vector(beta.true$coeffs)[-1]
prob=exp(eta)/(exp(eta)+1)
y.3w$obs <- sample_contbern(p=prob)
y.3w$true <-kappa1(beta.true$coeffs[1] + as.matrix(x.3w) %*% as.vector(beta.true$coeffs)[-1]) #get bern
x.3w_new <- x.3w[, col_all_good , drop = FALSE]
if (all(rownames(beta.true)[-1] == colnames(x.3w_new)) == TRUE)
{
print("Data loaded properly")
}
print("SNR:")
print(var(as.vector(y.3w$true)) / (sigma.y ^ 2))
#print("newcolnames")
#print(colnames(x.3w_new))
return(list(
'X' = as.matrix(x.3w_new),
'y' = y.3w,
'beta' = beta.true
))
}
data<- create_fisher_dataset(l1=10,l2=2,l3=2)
X<- data$X
X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
data<- create_fisher_dataset(l1=10,l2=1,l3=1)
X<- data$X
vals<-eigen(t(X)%*%X)$values
print(sort(vals))
X
rownames(X)
libs_path<-file.path("..","libs")
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
data<- create_basic_dataset_bern_thesis()
X<- data$X
y<- data$y$obs
y<-array(y, dim=(c(length(y),1)) )
rownames(X)
X[21,]
rownames(X)[21]
rownames(X)[100]
X[100,]
dummy.matrix(NF=3, NL=c(10,2,2))
dummy.matrix(NF=3, NL=c(11,2,2))
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
library(glmnet)
data<-load_deoxi_flourination()
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
library(glmnet)
data<-load_deoxi_flourination()
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
libs_path<-file.path("..","libs")
source(file.path(libs_path,'helper_functions.R'))
source(file.path(libs_path,'Shim3way_GLM.R'))
source(file.path(libs_path,'hierarchy_tests.R'))
source(file.path(libs_path,'recover_parameters.R'))
library(glmnet)
data<-load_deoxi_flourination()
print(max(data$yield))
hist(data$prob)
which(data$yield_corrected==100)
which(data$yield>100)
plot_yield_histo(data)
levels(data$a)
levels(data$b)
levels(data$s)
y_true<-data$prob*100
X_data<-data[c('a','b','s')]
colnames(X_data)<-c("alcohol", 'base', "sulfonyl-fluoride")
X_data <- lapply(X_data, as.factor)
X_data <- as.data.frame(X_data)  # Convert back to data frame
# Create the dummy matrix without intercept
X_dummy <- model.matrix(~ . - 1, data = X_data, contrasts.arg = lapply(X_data, contrasts, contrasts = FALSE))
# Find rows where the 37th column has value 1
rows_to_replace1 <- X_dummy[,37] == 1
# Replace values in columns 1 to 36 with -1 for these rows
X_dummy[rows_to_replace1, 1:36] <- -1
rows_to_replace2 <- X_dummy[,41] == 1
X_dummy[rows_to_replace2, 38:40] <- -1
rows_to_replace3 <- X_dummy[,46] == 1
X_dummy[rows_to_replace3, 42:45] <- -1
print(dim(X_dummy))
print(colSums(X_dummy))
##only once
X_dummy<-X_dummy[,-c(37,41,46)]
print(dim(X_dummy))
print(colSums(X_dummy))
###
new_colnames <- c(paste0("alcohol ", 1:36), paste0("base ", 1:3), paste0("sulfonyl-fluoride", 1:4))
colnames(X_dummy) <- new_colnames
X_dummy<-as.data.frame(X_dummy, col.names =TRUE)
for (i in 1:36) {
for (jk in 37:43) {
X_dummy[, paste0(colnames(X_dummy)[i], ':', colnames(X_dummy)[jk])] <-X_dummy[,i]*X_dummy[,jk]
}
}
for (j in c(37:39))
{for (k in c(40:43))
{
X_dummy[,paste0((colnames(X_dummy)[j]),':', colnames(X_dummy[k]) ) ] <- X_dummy[,j]*X_dummy[,k]
}
}
for (i in c(1:36))
{for (j in c(37:39))
{for (k in c(40:43))
{
X_dummy[,paste0( (colnames(X_dummy)[i]), ':' , colnames(X_dummy[j]), ":",  colnames(X_dummy[k]) ) ] <- X_dummy[,i]*X_dummy[,j]*X_dummy[,k]
}
}}
X<-as.matrix(X_dummy)
y<-y_true
################################################################ USE LASSO AND MY CLASS ON DATA #################################
l1=36
l2=3
l3=4
#print(beta_true)
range_main<-c(1: (l1+l2+l3) )
range_theta<-c( (l1+l2+l3+1) : (l1+l2+l3+l1*(l2+l3)+l2*l3) )
range_psi<-c(  (l1+l2+l3+ 1+ l1*(l2+l3)+l2*l3): (l1+l2+l3+ l1*(l2+l3)+l2*l3+l1*l2*l3) )
#y_centered<-y-mean(y)
y<-y/100 ############# only once
####START LASSO
#cross_validation_irlasso.cb( X=X, y=y, lambda_values=c( 1e-3, 6e-4, 3e-4, 1e-4, 6e-5), l1=l1,l2=l2,l3=l3, split_percentage = 0.6, k=4)
cv<-cross_validation_irlasso.cb( X=X, y=y, lambda_values=c( 1e-3, 6e-4, 3e-4, 1e-4, 6e-5), l1=l1,l2=l2,l3=l3, split_percentage = 0.6, k=4)
cv
lambda<-cv$best_lambda
lambda<-3e-4#what cv choses (keep this to run faster)
res_lasso<-irlasso.cb(X=X, Y=y, lambda=lambda, w.lambda=NULL, beta0=NULL,
centering=FALSE, scaling=FALSE, intercept=T,
maxit=10, tol=0.0545, sd.tol=1e-6,
verbose=TRUE)
coefs_lasso<-array(res_lasso$beta[-1,1,1])
coefs_lasso
res_lasso
res_lasso$BETA
colnames(X)
save_lassoo_coefs<-res_lasso$BETA
rownames(save_lassoo_coefs)<- colnames(X)
save_lassoo_coefs
save_lassso_coefs<-res_lasso$BETA
rownames(save_lassso_coefs)<- colnames(X)
dim(save_lassso_coefs)
dim(X)
rownames(save_lassso_coefs)<- c("intercept",colnames(X))
dim(X)
dim(save_lassso_coefs)
save_lassso_coefs
write.csv(res_lasso$BETA, file = "../Results/lasso_coefficients_thesis.csv", row.names = TRUE)
save_lassso_coefs
save_lasso_coefs<-res_lasso$BETA
rownames(save_lasso_coefs)<- c("intercept",colnames(X))
dim(X)
dim(save_lasso_coefs)
write.csv(save_lasso_coefs, file = "../Results/lasso_coefficients_thesis.csv", row.names = TRUE)
save_lasso_coefs
save_lasso_coefs<-drop(res_lasso$BETA)
rownames(save_lasso_coefs)<- c("intercept",colnames(X))
save_lasso_coefs
save_lasso_coefs<-drop(res_lasso$BETA)
dim(save_lasso_coefs)<-c(740,1)
rownames(save_lasso_coefs)<- c("intercept",colnames(X))
dim(X)
dim(save_lasso_coefs)
write.csv(save_lasso_coefs, file = "../Results/lasso_coefficients_thesis.csv", row.names = TRUE)
write.csv(save_lasso_coefs, file = "../Results/lasso_coefficients_DEOXY_thesis.csv", row.names = TRUE)
sum(beta_main_lasso_recovered==0)/length(beta_main_lasso_recovered)
coefs_lasso<-array(res_lasso$beta[-1,1,1])
interc_init<-res_lasso$beta[1,1,1]
beta_main_lasso<-coefs_lasso[range_main]
beta_2way_lasso<-coefs_lasso[range_theta]
beta_3way_lasso<-coefs_lasso[range_psi]
beta_2way_lasso_without_gamma<-get_beta_vec_2way(beta_main_lasso,l1=l1,l2=l2,l3=l3,only_beta = TRUE)
save_lasso_coefs<-drop(res_lasso$BETA)
dim(save_lasso_coefs)<-c(740,1)
rownames(save_lasso_coefs)<- c("intercept",colnames(X))
dim(X)
dim(save_lasso_coefs)
write.csv(save_lasso_coefs, file = "../Results/lasso_coefficients_DEOXY_thesis.csv", row.names = TRUE)
beta_hat<-beta_main_lasso
gamma_hat<- beta_2way_lasso/beta_2way_lasso_without_gamma
gamma_hat[is.nan(gamma_hat)]<-0
gamma_hat[!is.finite(gamma_hat)]<-0 #this is 0 in shim case
beta_3way_lasso_without_delta<- get_beta_vec_3way(beta_2way_lasso_without_gamma*gamma_hat, l1=l1, l2=l2, l3=l3, only_beta = TRUE) #maybe better for shim init
delta_hat<- beta_3way_lasso/beta_3way_lasso_without_delta
delta_hat[!is.finite(delta_hat)]<-0
delta_hat[is.nan(delta_hat)]<-0
predict_lasso<-kappa1(X%*%array(coefs_lasso, dim=c(length(coefs_lasso),1) )  + interc_init  ) #no intercept
print(r2(y, predict_lasso))
plot(predict_lasso, y,  xlab = "Predicted Yield", ylab = "True Yield", main = "Predicted vs True Yield  ")
abline(a = 0, b = 1, col = "red")
sum(beta_main_lasso==0)/length(beta_main_lasso)
sum(beta_2way_lasso==0)/length(beta_2way_lasso)
sum(beta_3way_lasso==0)/length(beta_3way_lasso)
sum(beta_main_lasso!=0)
sum(beta_2way_lasso!=0)
sum(beta_3way_lasso!=0)
##### RESULTS LASSO ON RECOVERED PARAMS ##########
beta_2way_lasso_matrix<-get_theta_from_theta_vec_2way3(beta_2way_lasso,l1=l1,l2=l2, l3=l3)
beta_3way_lasso_table<-get_psi_from_psi_vec3(beta_3way_lasso,l1=l1,l2=l2, l3=l3)
##hierarchy tests
test_hierarchy_layer12(beta_main_lasso,beta_2way_lasso_matrix, strong = TRUE)
test_hierarchy_layer23(beta_2way_lasso_matrix, beta_3way_lasso_table, strong = TRUE)
beta_main_lasso_recovered<- get_all_beta(beta_main_lasso, l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_lasso_recovered<-  get_theta_vec_2way3(  get_all_theta(beta_2way_lasso_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_lasso_recovered<- get_psi_vec3( get_all_psi(beta_3way_lasso_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
print("results lasso recovered")
test_hierarchy_layer12(beta_main_lasso_recovered, get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1 ), strong =TRUE)
test_hierarchy_layer23( get_theta_from_theta_vec_2way3( beta_2way_lasso_recovered, l1=l1+1, l2=l2+1, l3=l3+1),
get_psi_from_psi_vec3(beta_3way_lasso_recovered,l1=l1+1,l2=l2+1, l3=l3+1), strong =TRUE)
sum(beta_main_lasso_recovered==0)/length(beta_main_lasso_recovered)
sum(beta_2way_lasso_recovered==0)/length(beta_2way_lasso_recovered)
sum(beta_3way_lasso_recovered==0)/length(beta_3way_lasso_recovered)
sum(beta_main_lasso_recovered!=0)
sum(beta_2way_lasso_recovered!=0)
sum(beta_3way_lasso_recovered!=0)
lambda_beta<-5e-4
lambda_gamma<-1e-5
lambda_delta<-1e-4#have to run this
source(file.path(libs_path,'Shim3way_GLM.R'))
my_shim<-SHIM_3way(X=X, y=y, beta_init = beta_hat, gamma_init = gamma_hat, delta_init = delta_hat, l1=l1, l2=l2, l3=l3, scale = FALSE)
fitted<-my_shim$fit(X=X, y=y, lambda_beta = lambda_beta, lambda_gamma = lambda_gamma, lambda_delta = lambda_delta, w_beta = 1,
w_gamma = 1, w_delta = 1, tol=1e-2, compute_Q = Q_bern, intercept = interc_init, use_intercept = TRUE)
#fitted
my_shim$R2_score(self=fitted, X_new=X, y_true=y )
sum(abs(fitted$beta_all))
sum(abs(coefs_lasso))
sum(fitted$beta_all[range_main]==0)/length(range_main)
sum(fitted$beta_all[range_theta]==0)/length(range_theta)
sum(fitted$beta_all[range_psi]==0)/length(range_psi)
sum(fitted$beta_all[range_main]!=0)
sum(fitted$beta_all[range_theta]!=0)
sum(fitted$beta_all[range_psi]!=0)
beta_2way_shim_matrix<-get_theta_from_theta_vec_2way3(fitted$beta_all[range_theta],l1=l1,l2=l2, l3=l3)
beta_3way_shim_table<-get_psi_from_psi_vec3(fitted$beta_all[range_psi],l1=l1, l2=l2, l3=l3)
beta_main_shim_recovered<- get_all_beta(fitted$beta_all[range_main], l1=l1, l2=l2, l3=l3, threshold = 0)
beta_2way_shim_recovered<-  get_theta_vec_2way3( get_all_theta(beta_2way_shim_matrix, l1=l1, l2=l2, l3=l3, threshold = 0), l1=l1+1, l2=l2+1, l3=l3+1)
beta_3way_shim_recovered<- get_psi_vec3( get_all_psi(beta_3way_shim_table, l1=l1, l2=l2, l3=l3, threshold = 0) , l1=l1+1, l2=l2+1, l3=l3+1)
sum(beta_main_shim_recovered==0)/length(beta_main_shim_recovered)
sum(beta_2way_shim_recovered==0)/length(beta_2way_shim_recovered)
sum(beta_3way_shim_recovered==0)/length(beta_3way_shim_recovered)
sum(beta_main_shim_recovered!=0)
sum(beta_2way_shim_recovered!=0)
sum(beta_3way_shim_recovered!=0)
fitted$beta_all
fitted
beta_main_shim_recovered
order(abs(fitted$beta_all), decreasing=TRUE)
order(abs(coefs_lasso), decreasing = TRUE)
beta_main_shim_recovered
order(abs(coefs_lasso), decreasing = TRUE)
fitted$beta_all
coefs_SHIM<-c(fitted$intercept, fitted$beta_all)
save_shim_coefs<-coefs_SHIM
dim(save_shim_coefs)<-c(740,1)
rownames(save_shim_coefs)<- c("intercept",colnames(X))
write.csv(save_shim_coefs, file = "../Results/shim_coefficients_DEOXY_thesis.csv", row.names = TRUE)
order(abs(fitted$beta_all), decreasing=TRUE)
order(abs(coefs_lasso), decreasing = TRUE)
