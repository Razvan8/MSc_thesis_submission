X_df<-dummy.matrix(NF = 2, NL = c(3,3))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 2, NL = c(9,9))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$values
X_df<-dummy.matrix(NF = 2, NL = c(9,5))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$values
X_df<-dummy.matrix(NF = 3, NL = c(3,3,3))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 3, NL = c(8,8,8))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 2, NL = c(5,5))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 2, NL = c(4,4))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 2, NL = c(5,5))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 2, NL = c(6,6))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
res$vectors[35]
res$vectors[,35]
X_df<-dummy.matrix(NF = 2, NL = c(3,3))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
X_df<-dummy.matrix(NF = 2, NL = c(5,5))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
X_df<-dummy.matrix(NF = 2, NL = c(6,6))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors[,35]
res$values
max(res$vectors)
res$vectors
X_df<-dummy.matrix(NF = 2, NL = c(5,5))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
max(res$vectors)
res$values
res$vectors
X_df<-dummy.matrix(NF = 3, NL = c(3,3,3))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 3, NL = c(3,2,4))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 3, NL = c(3,5,4))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 3, NL = c(3,2,4))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 3, NL = c(2,2,2))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 3, NL = c(4,7,3))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
X_df<-dummy.matrix(NF = 3, NL = c(4,3,3))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
res$vectors
res$values
max(res$vectors[35])
max(res$vectors[,35])
X_df<-dummy.matrix(NF = 3, NL = c(3,3,3))
X<-as.matrix(X_df)
# Call the function to solve the problem
#result <- minimize_l1_constrained_nloptr(X, S)
# Print the result
#print(result)
sum(abs(result$beta_Sc))
res<-eigen(t(X)%*%X)
# Step 3: Extract eigenvectors
eigenvectors <- res$vectors
# Step 4: Calculate and display the norm of each eigenvector
for (i in 1:ncol(eigenvectors)) {
eigvec <- eigenvectors[, i]
eigvec_norm2 <- norm(eigvec, type = "2")  # Type "2" for the Euclidean norm
eigvec_norm1 <- sum(abs(eigvec)) # Type "1" for the Euclidean norm
cat("Norm1 of eigenvector", i, ":", eigvec_norm1, "\n")
#cat("Norm2 of eigenvector", i, ":", eigvec_norm2, "\n")
}
max(res$vectors[,35])
max(res$vectors[,26])
res$vectors
length(res$values)
vect<-res$vectors[,length((res$values))]
sum(vect!=0)/length(vect)
sum(vect!=0)
length(vect)
for (i in c(1:9)){
X_df<-dummy.matrix(NF = 3, NL = c(i,i,i))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
length(res$values)
vect<-res$vectors[,length((res$values))]
print(sum(vect!=0)/length(vect))
}
for (i in c(3:9)){
X_df<-dummy.matrix(NF = 3, NL = c(i,i,i))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
length(res$values)
vect<-res$vectors[,length((res$values))]
print(sum(vect!=0)/length(vect))
}
for (i in c(3:9)){
X_df<-dummy.matrix(NF = 3, NL = c(i,i,i))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
#length(res$values)
vect<-res$vectors[,length((res$values))]
print(sum(vect!=0)/length(vect))
}
for (i in c(3:9)){
X_df<-dummy.matrix(NF = 3, NL = c(i,i,i))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
#length(res$values)
vect<-res$vectors[,length((res$values))]
norm1<-sum(abs(vect))
norm2<-sqrt(sum(vect**2))
print(norm1/norm2)
}
for (i in c(3:9)){
X_df<-dummy.matrix(NF = 3, NL = c(i,i,i))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
#length(res$values)
vect<-res$vectors[,length((res$values))]
norm1<-sum(abs(vect))
norm2<-sqrt(sum(vect**2))
print(norm1/norm2)}
for (i in c(3:9)){
for (j in c(3:9)){
X_df<-dummy.matrix(NF = 3, NL = c(i,j,3))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
#length(res$values)
vect<-res$vectors[,length((res$values))]
norm1<-sum(abs(vect))
norm2<-sqrt(sum(vect**2))
print(norm1/norm2)}}
for (i in c(3:9)){
for (j in c(3:9)){
X_df<-dummy.matrix(NF = 3, NL = c(i,i,j))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
#length(res$values)
vect<-res$vectors[,length((res$values))]
norm1<-sum(abs(vect))
norm2<-sqrt(sum(vect**2))
print(norm1/norm2)}}
for (i in c(3:6)){
for (j in c(3:6)){
X_df<-dummy.matrix(NF = 3, NL = c(i,i,j))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
#length(res$values)
vect<-res$vectors[,length((res$values))]
norm1<-sum(abs(vect))
norm2<-sqrt(sum(vect**2))
print(norm1/norm2)}}
for (i in c(3:6)){
for (j in c(3:6)){
X_df<-dummy.matrix(NF = 3, NL = c(i,i,j))
X<-as.matrix(X_df)
res<-eigen(t(X)%*%X)
#length(res$values)
vect<-res$vectors[,length((res$values))-2]
norm1<-sum(abs(vect))
norm2<-sqrt(sum(vect**2))
print(norm1/norm2)}}
